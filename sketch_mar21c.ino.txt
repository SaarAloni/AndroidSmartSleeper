const int led1 = 5;  // light 1
const int led2 = 6;  // light 2

const int speaker1 = 8;

int state = 0; // input of bluetooth

typedef void(*action) ();
#include "pitches.h"


// notes in the melody:
int melody[] = {

  NOTE_C4, NOTE_G3, NOTE_G3, NOTE_A3, NOTE_G3, 0, NOTE_B3, NOTE_C4
};

// note durations: 4 = quarter note, 8 = eighth note, etc.:
int noteDurations[] = {

  4, 8, 8, 4, 4, 4, 4, 4
};

void setup() {
  // put your setup code here, to run once:
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  setStartLight();

  Serial.begin(9600); // bluetooth

}

void loop() {
  // put your main code here, to run repeatedly:
  if(Serial.available() > 0) {
    state = Serial.read();
    //changeState(state);
    action act = changeState(state);
    act();
    while (Serial.available() > 0) {
      char a = Serial.read();
    }
  }
  delay(600);
  
}

// change the state of the compunents by the bluetooth input
action changeState(int s) {
  switch(s) {
    case '0':
      return setStartLight;
    case '1':
      return state1;
    case '2':
      return state2;
    case '3':
      return state3;
    case '4':
      return state4;
    case '5':
      return state5;
    case '6':
      return state6;
    case '7':
      return state7;
    case '8':
      return state8;      
  return setStartLight;
  }
}

void state1() {
  setLightTo(32);
}

void state2() {
  setLightTo(64);
}

void state3() {
  setLightTo(96);
}

void state4() {
  setLightTo(128);
}

void state5() {
  setLightTo(160);
}

void state6() {
  setLightTo(192);
}

void state7() {
  setLightTo(224);
}

void state8() {
  setLightTo(255);
}

void setStartLight() {
  digitalWrite(led1, LOW);
  digitalWrite(led2, LOW);
}

void setLightTo(int power) {
  analogWrite(led1, power);
  analogWrite(led2, power);
}

void playtone() {
  digitalWrite(led1, 32);
  for (int thisNote = 0; thisNote < 8; thisNote++) {

    // to calculate the note duration, take one second divided by the note type.

    //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.

    int noteDuration = 1000 / noteDurations[thisNote];

    tone(8, melody[thisNote], noteDuration);

    // to distinguish the notes, set a minimum time between them.

    // the note's duration + 30% seems to work well:

    int pauseBetweenNotes = noteDuration * 1.30;

    delay(pauseBetweenNotes);

    // stop the tone playing:

    noTone(8);

  }
}
